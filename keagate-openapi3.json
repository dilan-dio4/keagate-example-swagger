{"openapi":"3.0.3","info":{"title":"Keagate â€“ A high-performance crypto payment gateway","version":"0.1.0","description":""},"components":{"securitySchemes":{"ApiKey":{"type":"apiKey","name":"keagate-api-key","in":"header"}},"schemas":{}},"paths":{"/invoice/{currency}/{invoiceId}":{"get":{"summary":"Route for Keagate's built-in invoice interface","tags":["Invoice"],"description":"Route for Keagate's built-in invoice interface.","parameters":[{"schema":{"type":"string"},"in":"path","name":"currency","required":true,"description":"Shorthand name of a payment's corresponding currency."},{"schema":{"type":"string"},"in":"path","name":"invoiceId","required":true,"description":"Invoice identifier. This is generated automatically as the internal id of the payment encrypted with aes-256-cbc plus your config's INVOICE_ENC_KEY."}],"responses":{"200":{"description":"Default Response"}}}},"/getInvoiceStatus":{"get":{"summary":"Retrieve the status and associated data of an invoice","tags":["Invoice"],"description":"Retrieve the status and associated data of an invoice. This is essentially the same as `/paymentStatus` except it doesn't \n        return any sensitive payment information and can be safely invoked from clients' machines to build custom payment interfaces","parameters":[{"schema":{"type":"string"},"in":"query","name":"invoiceId","required":true,"description":"The encrypted identifier given as the second part of the *invoiceUrl* path. This *invoiceUrl* is found in most of the administrative Keagate routes."}],"responses":{"200":{"description":"Successful response of invoice status.","content":{"application/json":{"schema":{"description":"Successful response of invoice status.","type":"object","properties":{"publicKey":{"description":"The destination address of the payment wallet for the client to send their assets to. \n        This wallet is controlled programmatically and will automatically deposit to your admin wallet as defined in `/config/local.json`.\n        For most currencies, this address is generated uniquely upon newly created payments, except for some currencies like XRP \n        where a custom memo must be sent by the payee to be identified.","type":"string"},"amount":{"description":"The total value of the payment as defined in `createPayment`. Note that this is not necessarily the exact amount required\n        before a payment is marked as complete. This depends on the value of *TRANSACTION_SLIPPAGE_TOLERANCE* in `/config/local.json` which dictates the\n        percentage of a payment that is discounted from the total payment to create a smoother transaction process with network fees.\n        ","type":"number"},"amountPaid":{"description":"The total value that has been confirmed as being paid by the payee.","type":"number"},"expiresAt":{"description":"An ISO 8601 timestamp detailing when a payment expires at. This value is calculated as [current date + *TRANSACTION_TIMEOUT* (a millisecond value in `/config/local.json`)].","type":"string"},"status":{"description":"The current status of a payment. Can be one of: [\"WAITING\",\"CONFIRMING\",\"CONFIRMED\",\"SENDING\",\"FINISHED\",\"PARTIALLY_PAID\",\"FAILED\",\"EXPIRED\"].","type":"string"},"invoiceCallbackUrl":{"format":"uri","description":"An optional URL that payees will be re-directed to when their payment finalizes within the invoice interface. A query string parameter will\n        be appended called *status* with the status of the payment. This re-direction will occur automatically.","type":"string"},"currency":{"description":"The shorthand name of the selected payment's corresponding currency.","type":"string"},"memo":{"description":"If this payment currency doesn't support randomly generated wallets for each payment (such as XRP). The payee must pass this value\n        as the memo or description of their transaction.","type":"string"}},"required":["publicKey","amount","amountPaid","expiresAt","status","currency"]}}}},"300":{"description":"Error response with message.","content":{"application/json":{"schema":{"description":"Error response with message.","type":"object","properties":{"error":{"description":"Error message string","type":"string"}}}}}}}}},"/createPayment":{"post":{"summary":"Create a new payment","tags":["Payment"],"description":"Create a new payment.","requestBody":{"content":{"application/json":{"schema":{"description":"Successful response","type":"object","properties":{"amount":{"description":"The total value of the payment as defined in `createPayment`. Note that this is not necessarily the exact amount required\n        before a payment is marked as complete. This depends on the value of *TRANSACTION_SLIPPAGE_TOLERANCE* in `/config/local.json` which dictates the\n        percentage of a payment that is discounted from the total payment to create a smoother transaction process with network fees.\n        ","type":"number"},"extraId":{"description":"An optional extraId as defined in `createPayment`. This is useful for you manually managing the identity of payment.\n        Example: An e-commerce store assigns some identification parameter upon a user's checkout for internal use. They create a new payment (via `/createPayment`) with \n        this value in the *extraId* parameter. The e-commerce store now doesn't have to manage Keagate's assigned *id*, since this *extraId* will be passed in the ipnCallback\n        and can be used to find payments via `/getPaymentsByExtraId`.","type":"string"},"ipnCallbackUrl":{"format":"uri","description":"An optional callback URL that will be invoked from Keagate when the status of a payment is updated. The request made by Keagate will\n        be a POST request with the body being a JSON object of this same schema.","type":"string"},"invoiceCallbackUrl":{"format":"uri","description":"An optional URL that payees will be re-directed to when their payment finalizes within the invoice interface. A query string parameter will\n        be appended called *status* with the status of the payment. This re-direction will occur automatically.","type":"string"},"currency":{"description":"The shorthand name of the selected payment's corresponding currency.","type":"string"}},"required":["amount","currency"]}}},"required":true},"security":[{"ApiKey":[]}],"responses":{"200":{"description":"Successful response","content":{"application/json":{"schema":{"description":"Successful response","type":"object","properties":{"publicKey":{"description":"The destination address of the payment wallet for the client to send their assets to. \n        This wallet is controlled programmatically and will automatically deposit to your admin wallet as defined in `/config/local.json`.\n        For most currencies, this address is generated uniquely upon newly created payments, except for some currencies like XRP \n        where a custom memo must be sent by the payee to be identified.","type":"string"},"amount":{"description":"The total value of the payment as defined in `createPayment`. Note that this is not necessarily the exact amount required\n        before a payment is marked as complete. This depends on the value of *TRANSACTION_SLIPPAGE_TOLERANCE* in `/config/local.json` which dictates the\n        percentage of a payment that is discounted from the total payment to create a smoother transaction process with network fees.\n        ","type":"number"},"amountPaid":{"description":"The total value that has been confirmed as being paid by the payee.","type":"number"},"expiresAt":{"description":"An ISO 8601 timestamp detailing when a payment expires at. This value is calculated as [current date + *TRANSACTION_TIMEOUT* (a millisecond value in `/config/local.json`)].","type":"string"},"createdAt":{"description":"An ISO 8601 timestamp detailing when a payment was created.","type":"string"},"updatedAt":{"description":"An ISO 8601 timestamp detailing when a payment last received a status update.","type":"string"},"status":{"description":"The current status of a payment. Can be one of: [\"WAITING\",\"CONFIRMING\",\"CONFIRMED\",\"SENDING\",\"FINISHED\",\"PARTIALLY_PAID\",\"FAILED\",\"EXPIRED\"].","type":"string"},"id":{"description":"The internal id of a payment, also serves as Mongo's _id for the given record.","type":"string"},"extraId":{"description":"An optional extraId as defined in `createPayment`. This is useful for you manually managing the identity of payment.\n        Example: An e-commerce store assigns some identification parameter upon a user's checkout for internal use. They create a new payment (via `/createPayment`) with \n        this value in the *extraId* parameter. The e-commerce store now doesn't have to manage Keagate's assigned *id*, since this *extraId* will be passed in the ipnCallback\n        and can be used to find payments via `/getPaymentsByExtraId`.","type":"string"},"ipnCallbackUrl":{"format":"uri","description":"An optional callback URL that will be invoked from Keagate when the status of a payment is updated. The request made by Keagate will\n        be a POST request with the body being a JSON object of this same schema.","type":"string"},"invoiceCallbackUrl":{"format":"uri","description":"An optional URL that payees will be re-directed to when their payment finalizes within the invoice interface. A query string parameter will\n        be appended called *status* with the status of the payment. This re-direction will occur automatically.","type":"string"},"payoutTransactionHash":{"description":"The transaction id of the successful payment from the generated wallet to your admin wallet of the same currency. This can be used in the corresponding block explorer of this payment's currency.","type":"string"},"invoiceUrl":{"description":"The path of a Keagate invoice that can be optionally used by your payee's. This is easier to use than the API-driven workflow, but\n        is not required. Note that this is only a path and must be appended to your public domain that Keagate is running on.","type":"string"},"currency":{"description":"The shorthand name of the selected payment's corresponding currency.","type":"string"},"walletIndex":{"description":"Can be ignored and is typically only used for debugging purposes.","type":"number"},"memo":{"description":"If this payment currency doesn't support randomly generated wallets for each payment (such as XRP). The payee must pass this value\n        as the memo or description of their transaction.","type":"string"}},"required":["publicKey","amount","amountPaid","expiresAt","createdAt","updatedAt","status","id","invoiceUrl","currency"]}}}},"300":{"description":"Error response with message.","content":{"application/json":{"schema":{"description":"Error response with message.","type":"object","properties":{"error":{"description":"Error message string","type":"string"}}}}}}}}},"/activePayments":{"get":{"summary":"Fetch an array of all active payments","tags":["Payment"],"description":"Fetch an array of all active payments. Payments that have been completed or expired will not appear here.","security":[{"ApiKey":[]}],"responses":{"200":{"description":"Successful response of array of all active payments","content":{"application/json":{"schema":{"description":"Successful response of array of all active payments","type":"array","items":{"description":"Successful response","type":"object","properties":{"publicKey":{"description":"The destination address of the payment wallet for the client to send their assets to. \n        This wallet is controlled programmatically and will automatically deposit to your admin wallet as defined in `/config/local.json`.\n        For most currencies, this address is generated uniquely upon newly created payments, except for some currencies like XRP \n        where a custom memo must be sent by the payee to be identified.","type":"string"},"amount":{"description":"The total value of the payment as defined in `createPayment`. Note that this is not necessarily the exact amount required\n        before a payment is marked as complete. This depends on the value of *TRANSACTION_SLIPPAGE_TOLERANCE* in `/config/local.json` which dictates the\n        percentage of a payment that is discounted from the total payment to create a smoother transaction process with network fees.\n        ","type":"number"},"amountPaid":{"description":"The total value that has been confirmed as being paid by the payee.","type":"number"},"expiresAt":{"description":"An ISO 8601 timestamp detailing when a payment expires at. This value is calculated as [current date + *TRANSACTION_TIMEOUT* (a millisecond value in `/config/local.json`)].","type":"string"},"createdAt":{"description":"An ISO 8601 timestamp detailing when a payment was created.","type":"string"},"updatedAt":{"description":"An ISO 8601 timestamp detailing when a payment last received a status update.","type":"string"},"status":{"description":"The current status of a payment. Can be one of: [\"WAITING\",\"CONFIRMING\",\"CONFIRMED\",\"SENDING\",\"FINISHED\",\"PARTIALLY_PAID\",\"FAILED\",\"EXPIRED\"].","type":"string"},"id":{"description":"The internal id of a payment, also serves as Mongo's _id for the given record.","type":"string"},"extraId":{"description":"An optional extraId as defined in `createPayment`. This is useful for you manually managing the identity of payment.\n        Example: An e-commerce store assigns some identification parameter upon a user's checkout for internal use. They create a new payment (via `/createPayment`) with \n        this value in the *extraId* parameter. The e-commerce store now doesn't have to manage Keagate's assigned *id*, since this *extraId* will be passed in the ipnCallback\n        and can be used to find payments via `/getPaymentsByExtraId`.","type":"string"},"ipnCallbackUrl":{"format":"uri","description":"An optional callback URL that will be invoked from Keagate when the status of a payment is updated. The request made by Keagate will\n        be a POST request with the body being a JSON object of this same schema.","type":"string"},"invoiceCallbackUrl":{"format":"uri","description":"An optional URL that payees will be re-directed to when their payment finalizes within the invoice interface. A query string parameter will\n        be appended called *status* with the status of the payment. This re-direction will occur automatically.","type":"string"},"payoutTransactionHash":{"description":"The transaction id of the successful payment from the generated wallet to your admin wallet of the same currency. This can be used in the corresponding block explorer of this payment's currency.","type":"string"},"invoiceUrl":{"description":"The path of a Keagate invoice that can be optionally used by your payee's. This is easier to use than the API-driven workflow, but\n        is not required. Note that this is only a path and must be appended to your public domain that Keagate is running on.","type":"string"},"currency":{"description":"The shorthand name of the selected payment's corresponding currency.","type":"string"},"walletIndex":{"description":"Can be ignored and is typically only used for debugging purposes.","type":"number"},"memo":{"description":"If this payment currency doesn't support randomly generated wallets for each payment (such as XRP). The payee must pass this value\n        as the memo or description of their transaction.","type":"string"}},"required":["publicKey","amount","amountPaid","expiresAt","createdAt","updatedAt","status","id","invoiceUrl","currency"]}}}}}}}},"/getPaymentStatus":{"get":{"summary":"Retrieve the status and associated data of a payment","tags":["Payment"],"description":"Retrieve the status and associated data of a payment.","parameters":[{"schema":{"type":"string"},"in":"query","name":"id","required":true,"description":"The id of an existing payment"}],"security":[{"ApiKey":[]}],"responses":{"200":{"description":"Successful response","content":{"application/json":{"schema":{"description":"Successful response","type":"object","properties":{"publicKey":{"description":"The destination address of the payment wallet for the client to send their assets to. \n        This wallet is controlled programmatically and will automatically deposit to your admin wallet as defined in `/config/local.json`.\n        For most currencies, this address is generated uniquely upon newly created payments, except for some currencies like XRP \n        where a custom memo must be sent by the payee to be identified.","type":"string"},"amount":{"description":"The total value of the payment as defined in `createPayment`. Note that this is not necessarily the exact amount required\n        before a payment is marked as complete. This depends on the value of *TRANSACTION_SLIPPAGE_TOLERANCE* in `/config/local.json` which dictates the\n        percentage of a payment that is discounted from the total payment to create a smoother transaction process with network fees.\n        ","type":"number"},"amountPaid":{"description":"The total value that has been confirmed as being paid by the payee.","type":"number"},"expiresAt":{"description":"An ISO 8601 timestamp detailing when a payment expires at. This value is calculated as [current date + *TRANSACTION_TIMEOUT* (a millisecond value in `/config/local.json`)].","type":"string"},"createdAt":{"description":"An ISO 8601 timestamp detailing when a payment was created.","type":"string"},"updatedAt":{"description":"An ISO 8601 timestamp detailing when a payment last received a status update.","type":"string"},"status":{"description":"The current status of a payment. Can be one of: [\"WAITING\",\"CONFIRMING\",\"CONFIRMED\",\"SENDING\",\"FINISHED\",\"PARTIALLY_PAID\",\"FAILED\",\"EXPIRED\"].","type":"string"},"id":{"description":"The internal id of a payment, also serves as Mongo's _id for the given record.","type":"string"},"extraId":{"description":"An optional extraId as defined in `createPayment`. This is useful for you manually managing the identity of payment.\n        Example: An e-commerce store assigns some identification parameter upon a user's checkout for internal use. They create a new payment (via `/createPayment`) with \n        this value in the *extraId* parameter. The e-commerce store now doesn't have to manage Keagate's assigned *id*, since this *extraId* will be passed in the ipnCallback\n        and can be used to find payments via `/getPaymentsByExtraId`.","type":"string"},"ipnCallbackUrl":{"format":"uri","description":"An optional callback URL that will be invoked from Keagate when the status of a payment is updated. The request made by Keagate will\n        be a POST request with the body being a JSON object of this same schema.","type":"string"},"invoiceCallbackUrl":{"format":"uri","description":"An optional URL that payees will be re-directed to when their payment finalizes within the invoice interface. A query string parameter will\n        be appended called *status* with the status of the payment. This re-direction will occur automatically.","type":"string"},"payoutTransactionHash":{"description":"The transaction id of the successful payment from the generated wallet to your admin wallet of the same currency. This can be used in the corresponding block explorer of this payment's currency.","type":"string"},"invoiceUrl":{"description":"The path of a Keagate invoice that can be optionally used by your payee's. This is easier to use than the API-driven workflow, but\n        is not required. Note that this is only a path and must be appended to your public domain that Keagate is running on.","type":"string"},"currency":{"description":"The shorthand name of the selected payment's corresponding currency.","type":"string"},"walletIndex":{"description":"Can be ignored and is typically only used for debugging purposes.","type":"number"},"memo":{"description":"If this payment currency doesn't support randomly generated wallets for each payment (such as XRP). The payee must pass this value\n        as the memo or description of their transaction.","type":"string"}},"required":["publicKey","amount","amountPaid","expiresAt","createdAt","updatedAt","status","id","invoiceUrl","currency"]}}}},"300":{"description":"Error response with message.","content":{"application/json":{"schema":{"description":"Error response with message.","type":"object","properties":{"error":{"description":"Error message string","type":"string"}}}}}}}}},"/getPaymentsByExtraId":{"get":{"summary":"Fetch an array of all payments by extraId","tags":["Payment"],"description":"Fetch an array of all payments by *extraId*. All payments by this query will appear here.","parameters":[{"schema":{"type":"string"},"in":"query","name":"extraId","required":true,"description":"The extraId of an existing payment"}],"security":[{"ApiKey":[]}],"responses":{"200":{"description":"Successful response of payments","content":{"application/json":{"schema":{"description":"Successful response of payments","type":"array","items":{"description":"Successful response","type":"object","properties":{"publicKey":{"description":"The destination address of the payment wallet for the client to send their assets to. \n        This wallet is controlled programmatically and will automatically deposit to your admin wallet as defined in `/config/local.json`.\n        For most currencies, this address is generated uniquely upon newly created payments, except for some currencies like XRP \n        where a custom memo must be sent by the payee to be identified.","type":"string"},"amount":{"description":"The total value of the payment as defined in `createPayment`. Note that this is not necessarily the exact amount required\n        before a payment is marked as complete. This depends on the value of *TRANSACTION_SLIPPAGE_TOLERANCE* in `/config/local.json` which dictates the\n        percentage of a payment that is discounted from the total payment to create a smoother transaction process with network fees.\n        ","type":"number"},"amountPaid":{"description":"The total value that has been confirmed as being paid by the payee.","type":"number"},"expiresAt":{"description":"An ISO 8601 timestamp detailing when a payment expires at. This value is calculated as [current date + *TRANSACTION_TIMEOUT* (a millisecond value in `/config/local.json`)].","type":"string"},"createdAt":{"description":"An ISO 8601 timestamp detailing when a payment was created.","type":"string"},"updatedAt":{"description":"An ISO 8601 timestamp detailing when a payment last received a status update.","type":"string"},"status":{"description":"The current status of a payment. Can be one of: [\"WAITING\",\"CONFIRMING\",\"CONFIRMED\",\"SENDING\",\"FINISHED\",\"PARTIALLY_PAID\",\"FAILED\",\"EXPIRED\"].","type":"string"},"id":{"description":"The internal id of a payment, also serves as Mongo's _id for the given record.","type":"string"},"extraId":{"description":"An optional extraId as defined in `createPayment`. This is useful for you manually managing the identity of payment.\n        Example: An e-commerce store assigns some identification parameter upon a user's checkout for internal use. They create a new payment (via `/createPayment`) with \n        this value in the *extraId* parameter. The e-commerce store now doesn't have to manage Keagate's assigned *id*, since this *extraId* will be passed in the ipnCallback\n        and can be used to find payments via `/getPaymentsByExtraId`.","type":"string"},"ipnCallbackUrl":{"format":"uri","description":"An optional callback URL that will be invoked from Keagate when the status of a payment is updated. The request made by Keagate will\n        be a POST request with the body being a JSON object of this same schema.","type":"string"},"invoiceCallbackUrl":{"format":"uri","description":"An optional URL that payees will be re-directed to when their payment finalizes within the invoice interface. A query string parameter will\n        be appended called *status* with the status of the payment. This re-direction will occur automatically.","type":"string"},"payoutTransactionHash":{"description":"The transaction id of the successful payment from the generated wallet to your admin wallet of the same currency. This can be used in the corresponding block explorer of this payment's currency.","type":"string"},"invoiceUrl":{"description":"The path of a Keagate invoice that can be optionally used by your payee's. This is easier to use than the API-driven workflow, but\n        is not required. Note that this is only a path and must be appended to your public domain that Keagate is running on.","type":"string"},"currency":{"description":"The shorthand name of the selected payment's corresponding currency.","type":"string"},"walletIndex":{"description":"Can be ignored and is typically only used for debugging purposes.","type":"number"},"memo":{"description":"If this payment currency doesn't support randomly generated wallets for each payment (such as XRP). The payee must pass this value\n        as the memo or description of their transaction.","type":"string"}},"required":["publicKey","amount","amountPaid","expiresAt","createdAt","updatedAt","status","id","invoiceUrl","currency"]}}}}}}}}},"servers":[{"url":"http://YOUR_SERVER"}],"security":[],"tags":[{"name":"Payment","description":"Payment lifecycle administrative routes. These routes require a valid `keagate-api-key` (set in local.json) and should never be directly invoked from your payees' machine."},{"name":"Invoice","description":"Publicly available routes that can be safely called from your payees' devices. These do not return sensitive information. Internally, these routes are used in the built-in invoice UI."}],"externalDocs":{"url":"https://keagate.io","description":"Find more info here"}}